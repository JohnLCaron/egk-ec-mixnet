// Generated by jextract

package org.cryptobiotic.gmp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class EgkGmpIF  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    public static MethodHandle __gmpz_export$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"__gmpz_export");
    }
    /**
     * {@snippet :
     * void* __gmpz_export(void*, size_t*, int, size_t, int, size_t, mpz_srcptr);
     * }
     */
    public static MemorySegment __gmpz_export(MemorySegment x0, MemorySegment x1, int x2, long x3, int x4, long x5, MemorySegment x6) {
        var mh$ = __gmpz_export$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gmpz_import$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"__gmpz_import");
    }
    /**
     * {@snippet :
     * void __gmpz_import(mpz_ptr, size_t, int, size_t, int, size_t, void*);
     * }
     */
    public static void __gmpz_import(MemorySegment x0, long x1, int x2, long x3, int x4, long x5, MemorySegment x6) {
        var mh$ = __gmpz_import$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gmpz_mod$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"__gmpz_mod");
    }
    /**
     * {@snippet :
     * void __gmpz_mod(mpz_ptr, mpz_srcptr, mpz_srcptr);
     * }
     */
    public static void __gmpz_mod(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = __gmpz_mod$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gmpz_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"__gmpz_mul");
    }
    /**
     * {@snippet :
     * void __gmpz_mul(mpz_ptr, mpz_srcptr, mpz_srcptr);
     * }
     */
    public static void __gmpz_mul(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = __gmpz_mul$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle egk_prodPowA$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$6,"egk_prodPowA");
    }
    /**
     * {@snippet :
     * void egk_prodPowA(void* result, void** pb, void** qb, int len, void* modulusBytes, size_t pbytes, size_t qbytes);
     * }
     */
    public static void egk_prodPowA(MemorySegment result, MemorySegment pb, MemorySegment qb, int len, MemorySegment modulusBytes, long pbytes, long qbytes) {
        var mh$ = egk_prodPowA$MH();
        try {
            mh$.invokeExact(result, pb, qb, len, modulusBytes, pbytes, qbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle egk_prodPow$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$0,"egk_prodPow");
    }
    /**
     * {@snippet :
     * void egk_prodPow(void* result, void** pb, void** qb, int nrows, void* modulusBytes, size_t pbytes, size_t qbytes);
     * }
     */
    public static void egk_prodPow(MemorySegment result, MemorySegment pb, MemorySegment qb, int nrows, MemorySegment modulusBytes, long pbytes, long qbytes) {
        var mh$ = egk_prodPow$MH();
        try {
            mh$.invokeExact(result, pb, qb, nrows, modulusBytes, pbytes, qbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle egk_mulMod$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$2,"egk_mulMod");
    }
    /**
     * {@snippet :
     * void egk_mulMod(void* result, void* pb1, void* pb2, void* modulusBytes, size_t nbytes);
     * }
     */
    public static void egk_mulMod(MemorySegment result, MemorySegment pb1, MemorySegment pb2, MemorySegment modulusBytes, long nbytes) {
        var mh$ = egk_mulMod$MH();
        try {
            mh$.invokeExact(result, pb1, pb2, modulusBytes, nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle egk_mulModA$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"egk_mulModA");
    }
    /**
     * {@snippet :
     * void egk_mulModA(void* result, void** pb, int len, void* modulusBytes, size_t nbytes);
     * }
     */
    public static void egk_mulModA(MemorySegment result, MemorySegment pb, int len, MemorySegment modulusBytes, long nbytes) {
        var mh$ = egk_mulModA$MH();
        try {
            mh$.invokeExact(result, pb, len, modulusBytes, nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle egk_powmA$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$5,"egk_powmA");
    }
    /**
     * {@snippet :
     * void egk_powmA(void* result, void** pb, void** qb, int len, void* modulusBytes, size_t pbytes, size_t qbytes);
     * }
     */
    public static void egk_powmA(MemorySegment result, MemorySegment pb, MemorySegment qb, int len, MemorySegment modulusBytes, long pbytes, long qbytes) {
        var mh$ = egk_powmA$MH();
        try {
            mh$.invokeExact(result, pb, qb, len, modulusBytes, pbytes, qbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


